
interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000288  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b17  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f4  00000000  00000000  00000efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e8  00000000  00000000  000015ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  000019d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003dd  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000128  00000000  00000000  00001eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001fdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  88:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GPIO_config_output>:
/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <GPIO_config_output+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <GPIO_config_output+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <GPIO_config_input_nopull>:
  a8:	fc 01       	movw	r30, r24
  aa:	90 81       	ld	r25, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <GPIO_config_input_nopull+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <GPIO_config_input_nopull+0xa>
  ba:	20 95       	com	r18
  bc:	29 23       	and	r18, r25
  be:	20 83       	st	Z, r18
  c0:	08 95       	ret

000000c2 <GPIO_write_low>:
  c2:	fc 01       	movw	r30, r24
  c4:	90 81       	ld	r25, Z
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <GPIO_write_low+0xe>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <GPIO_write_low+0xa>
  d4:	20 95       	com	r18
  d6:	29 23       	and	r18, r25
  d8:	20 83       	st	Z, r18
  da:	08 95       	ret

000000dc <GPIO_write_high>:
  dc:	fc 01       	movw	r30, r24
  de:	40 81       	ld	r20, Z
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <GPIO_write_high+0xe>
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <GPIO_write_high+0xa>
  ee:	24 2b       	or	r18, r20
  f0:	20 83       	st	Z, r18
  f2:	08 95       	ret

000000f4 <GPIO_read>:
/**********************************************************************
 * Function: GPIO_read()
 **********************************************************************/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	return  (*reg_name & (1<<pin_num));
  f4:	fc 01       	movw	r30, r24
  f6:	20 81       	ld	r18, Z
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <GPIO_read+0xe>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <GPIO_read+0xa>
 106:	82 23       	and	r24, r18
 108:	08 95       	ret

0000010a <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
 10a:	65 e0       	ldi	r22, 0x05	; 5
 10c:	84 e2       	ldi	r24, 0x24	; 36
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D1);
 114:	65 e0       	ldi	r22, 0x05	; 5
 116:	85 e2       	ldi	r24, 0x25	; 37
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_high>
    GPIO_config_output(&DDRB, LED_D2);
 11e:	64 e0       	ldi	r22, 0x04	; 4
 120:	84 e2       	ldi	r24, 0x24	; 36
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D2);
 128:	64 e0       	ldi	r22, 0x04	; 4
 12a:	85 e2       	ldi	r24, 0x25	; 37
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_high>
    GPIO_config_output(&DDRB, LED_D3);
 132:	63 e0       	ldi	r22, 0x03	; 3
 134:	84 e2       	ldi	r24, 0x24	; 36
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D3);
 13c:	63 e0       	ldi	r22, 0x03	; 3
 13e:	85 e2       	ldi	r24, 0x25	; 37
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_high>
    GPIO_config_output(&DDRB, LED_D4);
 146:	62 e0       	ldi	r22, 0x02	; 2
 148:	84 e2       	ldi	r24, 0x24	; 36
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D4);
 150:	62 e0       	ldi	r22, 0x02	; 2
 152:	85 e2       	ldi	r24, 0x25	; 37
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_high>
	
	GPIO_config_input_nopull(&DDRC, PUSH_BUTT);
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	87 e2       	ldi	r24, 0x27	; 39
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_config_input_nopull>

    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    
    TIM1_overflow_interrupt_enable();
 164:	ef e6       	ldi	r30, 0x6F	; 111
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	80 83       	st	Z, r24
	

    // Enables interrupts by setting the global interrupt mask
    sei();
 16e:	78 94       	sei

    // Infinite loop
    while (1)
    {
         if (GPIO_read(&PINC, PUSH_BUTT) == 0)
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	86 e2       	ldi	r24, 0x26	; 38
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 7a 00 	call	0xf4	; 0xf4 <GPIO_read>
 17a:	81 11       	cpse	r24, r1
 17c:	09 c0       	rjmp	.+18     	; 0x190 <main+0x86>
         {
			 TIM1_overflow_33ms();
 17e:	e1 e8       	ldi	r30, 0x81	; 129
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	8a 7f       	andi	r24, 0xFA	; 250
 186:	80 83       	st	Z, r24
 188:	80 81       	ld	r24, Z
 18a:	82 60       	ori	r24, 0x02	; 2
 18c:	80 83       	st	Z, r24
 18e:	f0 cf       	rjmp	.-32     	; 0x170 <main+0x66>
         } 
		 else
		 {
			 TIM1_overflow_262ms();
 190:	e1 e8       	ldi	r30, 0x81	; 129
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8b 7f       	andi	r24, 0xFB	; 251
 198:	80 83       	st	Z, r24
 19a:	80 81       	ld	r24, Z
 19c:	83 60       	ori	r24, 0x03	; 3
 19e:	80 83       	st	Z, r24
 1a0:	e7 cf       	rjmp	.-50     	; 0x170 <main+0x66>

000001a2 <__vector_13>:
    // Will never reach this
    return 0;
}

ISR(TIMER1_OVF_vect)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	static uint8_t i=0;
	static uint8_t c=0;
	if (c == 0) i++; else i--;
 1c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <c.1632>
 1c8:	81 11       	cpse	r24, r1
 1ca:	06 c0       	rjmp	.+12     	; 0x1d8 <__vector_13+0x36>
 1cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
 1d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <__vector_13+0x40>
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1dc:	81 50       	subi	r24, 0x01	; 1
 1de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (i == 3)  c=1;
 1e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	19 f4       	brne	.+6      	; 0x1f0 <__vector_13+0x4e>
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <c.1632>
	if (i == 0)  c=0;
 1f0:	81 11       	cpse	r24, r1
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__vector_13+0x56>
 1f4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <c.1632>

	
	//actuation
	GPIO_write_low(&PORTB,LED_D1);
 1f8:	65 e0       	ldi	r22, 0x05	; 5
 1fa:	85 e2       	ldi	r24, 0x25	; 37
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_low>
	GPIO_write_low(&PORTB,LED_D2);
 202:	64 e0       	ldi	r22, 0x04	; 4
 204:	85 e2       	ldi	r24, 0x25	; 37
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_low>
	GPIO_write_low(&PORTB,LED_D3);
 20c:	63 e0       	ldi	r22, 0x03	; 3
 20e:	85 e2       	ldi	r24, 0x25	; 37
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_low>
	GPIO_write_low(&PORTB,LED_D4);
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	85 e2       	ldi	r24, 0x25	; 37
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_low>
	switch(i)
 220:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	61 f0       	breq	.+24     	; 0x240 <__vector_13+0x9e>
 228:	28 f0       	brcs	.+10     	; 0x234 <__vector_13+0x92>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	79 f0       	breq	.+30     	; 0x24c <__vector_13+0xaa>
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	99 f0       	breq	.+38     	; 0x258 <__vector_13+0xb6>
 232:	17 c0       	rjmp	.+46     	; 0x262 <__vector_13+0xc0>
	{
		case 0:
		GPIO_write_high(&PORTB,LED_D1);
 234:	65 e0       	ldi	r22, 0x05	; 5
 236:	85 e2       	ldi	r24, 0x25	; 37
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_high>
		break;
 23e:	11 c0       	rjmp	.+34     	; 0x262 <__vector_13+0xc0>
		
		case 1:
		GPIO_write_high(&PORTB,LED_D2);
 240:	64 e0       	ldi	r22, 0x04	; 4
 242:	85 e2       	ldi	r24, 0x25	; 37
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_high>
		break;
 24a:	0b c0       	rjmp	.+22     	; 0x262 <__vector_13+0xc0>
		
		case 2:
		GPIO_write_high(&PORTB,LED_D3);
 24c:	63 e0       	ldi	r22, 0x03	; 3
 24e:	85 e2       	ldi	r24, 0x25	; 37
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_high>
		break;
 256:	05 c0       	rjmp	.+10     	; 0x262 <__vector_13+0xc0>
		
		case 3:
		GPIO_write_high(&PORTB,LED_D4);
 258:	62 e0       	ldi	r22, 0x02	; 2
 25a:	85 e2       	ldi	r24, 0x25	; 37
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_high>
		break;
	}
 262:	ff 91       	pop	r31
 264:	ef 91       	pop	r30
 266:	bf 91       	pop	r27
 268:	af 91       	pop	r26
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	7f 91       	pop	r23
 270:	6f 91       	pop	r22
 272:	5f 91       	pop	r21
 274:	4f 91       	pop	r20
 276:	3f 91       	pop	r19
 278:	2f 91       	pop	r18
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
