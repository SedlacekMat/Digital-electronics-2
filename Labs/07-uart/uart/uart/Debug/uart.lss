
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  000006ac  00000740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800156  00800156  00000796  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000796  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000171f  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aae  00000000  00000000  0000202f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aae  00000000  00000000  00002add  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  0000358c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000575  00000000  00000000  00003848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bba  00000000  00000000  00003dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004977  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__vector_18>
  4c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 35       	cpi	r26, 0x56	; 86
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e5       	ldi	r26, 0x56	; 86
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 39       	cpi	r26, 0x9B	; 155
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 48 01 	call	0x290	; 0x290 <main>
  9e:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <toggle_e+0x8>
  b2:	00 00       	nop
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	08 95       	ret

000000bc <lcd_write>:
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
  c0:	66 23       	and	r22, r22
  c2:	21 f0       	breq	.+8      	; 0xcc <lcd_write+0x10>
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_write+0x16>
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	8b b9       	out	0x0b, r24	; 11
 102:	cc 23       	and	r28, r28
 104:	1c f4       	brge	.+6      	; 0x10c <lcd_write+0x50>
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	c6 ff       	sbrs	r28, 6
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_write+0x5a>
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 64       	ori	r24, 0x40	; 64
 114:	8b b9       	out	0x0b, r24	; 11
 116:	c5 ff       	sbrs	r28, 5
 118:	03 c0       	rjmp	.+6      	; 0x120 <lcd_write+0x64>
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	c4 ff       	sbrs	r28, 4
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x6e>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	8b b9       	out	0x0b, r24	; 11
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	8b b9       	out	0x0b, r24	; 11
 146:	c3 ff       	sbrs	r28, 3
 148:	03 c0       	rjmp	.+6      	; 0x150 <lcd_write+0x94>
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	c2 ff       	sbrs	r28, 2
 152:	03 c0       	rjmp	.+6      	; 0x15a <lcd_write+0x9e>
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 64       	ori	r24, 0x40	; 64
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	c1 ff       	sbrs	r28, 1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0xa8>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 62       	ori	r24, 0x20	; 32
 162:	8b b9       	out	0x0b, r24	; 11
 164:	c0 ff       	sbrs	r28, 0
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0xb2>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 61       	ori	r24, 0x10	; 16
 176:	8b b9       	out	0x0b, r24	; 11
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	87 eb       	ldi	r24, 0xB7	; 183
 18c:	9b e0       	ldi	r25, 0x0B	; 11
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_write+0xd2>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_write+0xd8>
 194:	00 00       	nop
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_command>:
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1a0:	08 95       	ret

000001a2 <lcd_gotoxy>:
 1a2:	61 11       	cpse	r22, r1
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <lcd_gotoxy+0xc>
 1a6:	80 58       	subi	r24, 0x80	; 128
 1a8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1ac:	08 95       	ret
 1ae:	80 54       	subi	r24, 0x40	; 64
 1b0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1b4:	08 95       	ret

000001b6 <lcd_clrscr>:
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1bc:	08 95       	ret

000001be <lcd_putc>:
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1c4:	08 95       	ret

000001c6 <lcd_puts>:
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	fc 01       	movw	r30, r24
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <lcd_puts+0xe>
 1ce:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_putc>
 1d2:	fe 01       	movw	r30, r28
 1d4:	ef 01       	movw	r28, r30
 1d6:	21 96       	adiw	r28, 0x01	; 1
 1d8:	80 81       	ld	r24, Z
 1da:	81 11       	cpse	r24, r1
 1dc:	f8 cf       	rjmp	.-16     	; 0x1ce <lcd_puts+0x8>
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1e4:	cf 93       	push	r28
 1e6:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1ee:	8a b1       	in	r24, 0x0a	; 10
 1f0:	80 62       	ori	r24, 0x20	; 32
 1f2:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1f4:	84 b1       	in	r24, 0x04	; 4
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 200:	8a b1       	in	r24, 0x0a	; 10
 202:	80 62       	ori	r24, 0x20	; 32
 204:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 206:	8a b1       	in	r24, 0x0a	; 10
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 20c:	8a b1       	in	r24, 0x0a	; 10
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	99 ef       	ldi	r25, 0xF9	; 249
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init+0x32>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x38>
 21c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	80 62       	ori	r24, 0x20	; 32
 222:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	80 61       	ori	r24, 0x10	; 16
 228:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 22a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 22e:	8f e1       	ldi	r24, 0x1F	; 31
 230:	9e e4       	ldi	r25, 0x4E	; 78
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x4e>
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x54>
 238:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_init+0x5e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_init+0x64>
 248:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 24a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_init+0x6e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_init+0x74>
 258:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 25a:	8b b1       	in	r24, 0x0b	; 11
 25c:	8f 7e       	andi	r24, 0xEF	; 239
 25e:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x84>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_init+0x8a>
 26e:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 270:	88 e2       	ldi	r24, 0x28	; 40
 272:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_clrscr();                  /* display clear                */
 27c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
}/* lcd_init */
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 290:	8c e0       	ldi	r24, 0x0C	; 12
 292:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("value:");
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 29e:	89 e0       	ldi	r24, 0x09	; 9
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    lcd_gotoxy(3, 1); lcd_puts("key:");
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 2ae:	80 e1       	ldi	r24, 0x10	; 16
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    lcd_gotoxy(8, 0); lcd_puts("a");    // Put ADC value in decimal
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	88 e0       	ldi	r24, 0x08	; 8
 2ba:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 2be:	85 e1       	ldi	r24, 0x15	; 21
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    lcd_gotoxy(13,0); lcd_puts("b");    // Put ADC value in hexadecimal
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	8d e0       	ldi	r24, 0x0D	; 13
 2ca:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 2ce:	87 e1       	ldi	r24, 0x17	; 23
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
    lcd_gotoxy(8, 1); lcd_puts("c");    // Put button name here
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	88 e0       	ldi	r24, 0x08	; 8
 2da:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 2de:	89 e1       	ldi	r24, 0x19	; 25
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>

    // Configure ADC to convert PC0[A0] analog value
	
    // Set ADC reference to AVcc
	ADMUX |= (1<<REFS0);
 2e6:	ec e7       	ldi	r30, 0x7C	; 124
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	80 64       	ori	r24, 0x40	; 64
 2ee:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
 2f0:	80 81       	ld	r24, Z
 2f2:	8f 77       	andi	r24, 0x7F	; 127
 2f4:	80 83       	st	Z, r24
    // Set input channel to ADC0
	ADMUX &= ~(1<<MUX3);
 2f6:	80 81       	ld	r24, Z
 2f8:	87 7f       	andi	r24, 0xF7	; 247
 2fa:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX2);
 2fc:	80 81       	ld	r24, Z
 2fe:	8b 7f       	andi	r24, 0xFB	; 251
 300:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX1);
 302:	80 81       	ld	r24, Z
 304:	8d 7f       	andi	r24, 0xFD	; 253
 306:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX0);
 308:	80 81       	ld	r24, Z
 30a:	8e 7f       	andi	r24, 0xFE	; 254
 30c:	80 83       	st	Z, r24
    // Enable ADC module
	ADCSRA |= (1<<ADEN);
 30e:	ea e7       	ldi	r30, 0x7A	; 122
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	80 68       	ori	r24, 0x80	; 128
 316:	80 83       	st	Z, r24
    // Enable conversion complete interrupt
	ADCSRA |= (1<<ADIE);
 318:	80 81       	ld	r24, Z
 31a:	88 60       	ori	r24, 0x08	; 8
 31c:	80 83       	st	Z, r24
    // Set clock prescaler to 128
	ADCSRA |= (1<<ADPS2);
 31e:	80 81       	ld	r24, Z
 320:	84 60       	ori	r24, 0x04	; 4
 322:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1);
 324:	80 81       	ld	r24, Z
 326:	82 60       	ori	r24, 0x02	; 2
 328:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS0);
 32a:	80 81       	ld	r24, Z
 32c:	81 60       	ori	r24, 0x01	; 1
 32e:	80 83       	st	Z, r24
    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Set prescaler to 262 ms and enable overflow interrupt
	TIM1_overflow_262ms();
 330:	e1 e8       	ldi	r30, 0x81	; 129
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	8b 7f       	andi	r24, 0xFB	; 251
 338:	80 83       	st	Z, r24
 33a:	80 81       	ld	r24, Z
 33c:	83 60       	ori	r24, 0x03	; 3
 33e:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 340:	ef e6       	ldi	r30, 0x6F	; 111
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	81 60       	ori	r24, 0x01	; 1
 348:	80 83       	st	Z, r24
    // Initialize UART to asynchronous, 8N1, 9600

    // Enables interrupts by setting the global interrupt mask
    sei();
 34a:	78 94       	sei
 34c:	ff cf       	rjmp	.-2      	; 0x34c <main+0xbc>

0000034e <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Use single conversion mode and start conversion four times
 *           per second.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	8f 93       	push	r24
 35a:	ef 93       	push	r30
 35c:	ff 93       	push	r31
    // Start ADC conversion
	ADCSRA |= (1<<ADSC);
 35e:	ea e7       	ldi	r30, 0x7A	; 122
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	80 64       	ori	r24, 0x40	; 64
 366:	80 83       	st	Z, r24

}
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	8f 91       	pop	r24
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <__vector_21>:
/**********************************************************************
 * Function: ADC complete interrupt
 * Purpose:  Display value on LCD and send it to UART.
 **********************************************************************/
ISR(ADC_vect)
{
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	0f 93       	push	r16
 384:	1f 93       	push	r17
 386:	2f 93       	push	r18
 388:	3f 93       	push	r19
 38a:	4f 93       	push	r20
 38c:	5f 93       	push	r21
 38e:	6f 93       	push	r22
 390:	7f 93       	push	r23
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	af 93       	push	r26
 398:	bf 93       	push	r27
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	cd b7       	in	r28, 0x3d	; 61
 3a4:	de b7       	in	r29, 0x3e	; 62
 3a6:	2c 97       	sbiw	r28, 0x0c	; 12
 3a8:	de bf       	out	0x3e, r29	; 62
 3aa:	cd bf       	out	0x3d, r28	; 61
    uint16_t value = 0;
    char lcd_string[4] = "0000";
 3ac:	80 e3       	ldi	r24, 0x30	; 48
 3ae:	90 e3       	ldi	r25, 0x30	; 48
 3b0:	9a 83       	std	Y+2, r25	; 0x02
 3b2:	89 83       	std	Y+1, r24	; 0x01
 3b4:	9c 83       	std	Y+4, r25	; 0x04
 3b6:	8b 83       	std	Y+3, r24	; 0x03
	//char lcd_string_hex[3] = "000";
	char lcd_clear[8] = "        ";
 3b8:	88 e0       	ldi	r24, 0x08	; 8
 3ba:	e0 e0       	ldi	r30, 0x00	; 0
 3bc:	f1 e0       	ldi	r31, 0x01	; 1
 3be:	de 01       	movw	r26, r28
 3c0:	15 96       	adiw	r26, 0x05	; 5
 3c2:	01 90       	ld	r0, Z+
 3c4:	0d 92       	st	X+, r0
 3c6:	8a 95       	dec	r24
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <__vector_21+0x4a>
	lcd_gotoxy(8, 0);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	88 e0       	ldi	r24, 0x08	; 8
 3ce:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
	lcd_puts(lcd_clear);
 3d2:	ce 01       	movw	r24, r28
 3d4:	05 96       	adiw	r24, 0x05	; 5
 3d6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
	
    value = ADC;                  // Copy ADC result to 16-bit variable
 3da:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 3de:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3e2:	4a e0       	ldi	r20, 0x0A	; 10
 3e4:	be 01       	movw	r22, r28
 3e6:	6f 5f       	subi	r22, 0xFF	; 255
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	c8 01       	movw	r24, r16
 3ec:	0e 94 1f 03 	call	0x63e	; 0x63e <__itoa_ncheck>
    itoa(value, lcd_string, 10);  // Convert decimal value to string
	lcd_gotoxy(8, 0); lcd_puts(lcd_string);
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	88 e0       	ldi	r24, 0x08	; 8
 3f4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 3f8:	ce 01       	movw	r24, r28
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
	uart_puts(lcd_string);
 400:	ce 01       	movw	r24, r28
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	0e 94 12 03 	call	0x624	; 0x624 <uart_puts>
	uart_puts("/n/r");
 408:	8b e1       	ldi	r24, 0x1B	; 27
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	0e 94 12 03 	call	0x624	; 0x624 <uart_puts>
 410:	40 e1       	ldi	r20, 0x10	; 16
 412:	be 01       	movw	r22, r28
 414:	6f 5f       	subi	r22, 0xFF	; 255
 416:	7f 4f       	sbci	r23, 0xFF	; 255
 418:	c8 01       	movw	r24, r16
 41a:	0e 94 1f 03 	call	0x63e	; 0x63e <__itoa_ncheck>
	//hex
	itoa(value, lcd_string, 16);
    lcd_gotoxy(13, 0); lcd_puts(lcd_string);
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	8d e0       	ldi	r24, 0x0D	; 13
 422:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
 426:	ce 01       	movw	r24, r28
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
	uart_puts(lcd_string);
 42e:	ce 01       	movw	r24, r28
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	0e 94 12 03 	call	0x624	; 0x624 <uart_puts>
	uart_puts("/n/r");
 436:	8b e1       	ldi	r24, 0x1B	; 27
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	0e 94 12 03 	call	0x624	; 0x624 <uart_puts>
	//pressedButt
	lcd_gotoxy(8, 1);
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	88 e0       	ldi	r24, 0x08	; 8
 442:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
	lcd_puts(lcd_clear);
 446:	ce 01       	movw	r24, r28
 448:	05 96       	adiw	r24, 0x05	; 5
 44a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
	lcd_gotoxy(8, 1);
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	88 e0       	ldi	r24, 0x08	; 8
 452:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
	if (value > 1020) {lcd_puts("NONE    ");uart_puts("NONE    ");uart_puts("/n/r");}
 456:	0d 3f       	cpi	r16, 0xFD	; 253
 458:	83 e0       	ldi	r24, 0x03	; 3
 45a:	18 07       	cpc	r17, r24
 45c:	68 f0       	brcs	.+26     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 45e:	80 e2       	ldi	r24, 0x20	; 32
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 466:	80 e2       	ldi	r24, 0x20	; 32
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 12 03 	call	0x624	; 0x624 <uart_puts>
 46e:	8b e1       	ldi	r24, 0x1B	; 27
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	0e 94 12 03 	call	0x624	; 0x624 <uart_puts>
 476:	4e c0       	rjmp	.+156    	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
	else if (value > 600) {lcd_puts("SELECT  ");uart_puts("SELECT  ");uart_puts("/n/r");}
 478:	09 35       	cpi	r16, 0x59	; 89
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	18 07       	cpc	r17, r24
 47e:	68 f0       	brcs	.+26     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 480:	89 e2       	ldi	r24, 0x29	; 41
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 488:	89 e2       	ldi	r24, 0x29	; 41
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 12 03 	call	0x624	; 0x624 <uart_puts>
 490:	8b e1       	ldi	r24, 0x1B	; 27
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	0e 94 12 03 	call	0x624	; 0x624 <uart_puts>
 498:	3d c0       	rjmp	.+122    	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
	else if (value > 390) {lcd_puts("LEFT    ");uart_puts("LEFT    ");uart_puts("/n/r");}
 49a:	07 38       	cpi	r16, 0x87	; 135
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	18 07       	cpc	r17, r24
 4a0:	68 f0       	brcs	.+26     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4a2:	82 e3       	ldi	r24, 0x32	; 50
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 4aa:	82 e3       	ldi	r24, 0x32	; 50
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	0e 94 12 03 	call	0x624	; 0x624 <uart_puts>
 4b2:	8b e1       	ldi	r24, 0x1B	; 27
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	0e 94 12 03 	call	0x624	; 0x624 <uart_puts>
 4ba:	2c c0       	rjmp	.+88     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
	else if (value > 200) {lcd_puts("DOWN    ");uart_puts("DOWN    ");uart_puts("/n/r");}
 4bc:	09 3c       	cpi	r16, 0xC9	; 201
 4be:	11 05       	cpc	r17, r1
 4c0:	68 f0       	brcs	.+26     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4c2:	8b e3       	ldi	r24, 0x3B	; 59
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 4ca:	8b e3       	ldi	r24, 0x3B	; 59
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	0e 94 12 03 	call	0x624	; 0x624 <uart_puts>
 4d2:	8b e1       	ldi	r24, 0x1B	; 27
 4d4:	91 e0       	ldi	r25, 0x01	; 1
 4d6:	0e 94 12 03 	call	0x624	; 0x624 <uart_puts>
 4da:	1c c0       	rjmp	.+56     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
	else if (value > 80)  {lcd_puts("UP      ");uart_puts("UP      ");uart_puts("/n/r");}
 4dc:	01 35       	cpi	r16, 0x51	; 81
 4de:	11 05       	cpc	r17, r1
 4e0:	68 f0       	brcs	.+26     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4e2:	84 e4       	ldi	r24, 0x44	; 68
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 4ea:	84 e4       	ldi	r24, 0x44	; 68
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	0e 94 12 03 	call	0x624	; 0x624 <uart_puts>
 4f2:	8b e1       	ldi	r24, 0x1B	; 27
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	0e 94 12 03 	call	0x624	; 0x624 <uart_puts>
 4fa:	0c c0       	rjmp	.+24     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
	else {lcd_puts("RIGHT   ");uart_puts("RIGHT   ");uart_puts("/n/r");}
 4fc:	8d e4       	ldi	r24, 0x4D	; 77
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 504:	8d e4       	ldi	r24, 0x4D	; 77
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	0e 94 12 03 	call	0x624	; 0x624 <uart_puts>
 50c:	8b e1       	ldi	r24, 0x1B	; 27
 50e:	91 e0       	ldi	r25, 0x01	; 1
 510:	0e 94 12 03 	call	0x624	; 0x624 <uart_puts>
	
	
	
}
 514:	2c 96       	adiw	r28, 0x0c	; 12
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	f8 94       	cli
 51a:	de bf       	out	0x3e, r29	; 62
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	cd bf       	out	0x3d, r28	; 61
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	ff 91       	pop	r31
 526:	ef 91       	pop	r30
 528:	bf 91       	pop	r27
 52a:	af 91       	pop	r26
 52c:	9f 91       	pop	r25
 52e:	8f 91       	pop	r24
 530:	7f 91       	pop	r23
 532:	6f 91       	pop	r22
 534:	5f 91       	pop	r21
 536:	4f 91       	pop	r20
 538:	3f 91       	pop	r19
 53a:	2f 91       	pop	r18
 53c:	1f 91       	pop	r17
 53e:	0f 91       	pop	r16
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	2f 93       	push	r18
 556:	8f 93       	push	r24
 558:	9f 93       	push	r25
 55a:	ef 93       	push	r30
 55c:	ff 93       	push	r31
 55e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 562:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 566:	8c 71       	andi	r24, 0x1C	; 28
 568:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <UART_RxHead>
 56c:	ef 5f       	subi	r30, 0xFF	; 255
 56e:	ef 71       	andi	r30, 0x1F	; 31
 570:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <UART_RxTail>
 574:	e9 17       	cp	r30, r25
 576:	39 f0       	breq	.+14     	; 0x586 <__vector_18+0x3c>
 578:	e0 93 58 01 	sts	0x0158, r30	; 0x800158 <UART_RxHead>
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	e5 5a       	subi	r30, 0xA5	; 165
 580:	fe 4f       	sbci	r31, 0xFE	; 254
 582:	20 83       	st	Z, r18
 584:	01 c0       	rjmp	.+2      	; 0x588 <__vector_18+0x3e>
 586:	82 e0       	ldi	r24, 0x02	; 2
 588:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <__data_end>
 58c:	89 2b       	or	r24, r25
 58e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
 592:	ff 91       	pop	r31
 594:	ef 91       	pop	r30
 596:	9f 91       	pop	r25
 598:	8f 91       	pop	r24
 59a:	2f 91       	pop	r18
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	1f 90       	pop	r1
 5a4:	18 95       	reti

000005a6 <__vector_19>:
 5a6:	1f 92       	push	r1
 5a8:	0f 92       	push	r0
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	0f 92       	push	r0
 5ae:	11 24       	eor	r1, r1
 5b0:	8f 93       	push	r24
 5b2:	9f 93       	push	r25
 5b4:	ef 93       	push	r30
 5b6:	ff 93       	push	r31
 5b8:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <UART_TxHead>
 5bc:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <UART_TxTail>
 5c0:	98 17       	cp	r25, r24
 5c2:	69 f0       	breq	.+26     	; 0x5de <__vector_19+0x38>
 5c4:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <UART_TxTail>
 5c8:	ef 5f       	subi	r30, 0xFF	; 255
 5ca:	ef 71       	andi	r30, 0x1F	; 31
 5cc:	e0 93 59 01 	sts	0x0159, r30	; 0x800159 <UART_TxTail>
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	e5 58       	subi	r30, 0x85	; 133
 5d4:	fe 4f       	sbci	r31, 0xFE	; 254
 5d6:	80 81       	ld	r24, Z
 5d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 5dc:	05 c0       	rjmp	.+10     	; 0x5e8 <__vector_19+0x42>
 5de:	e1 ec       	ldi	r30, 0xC1	; 193
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	8f 7d       	andi	r24, 0xDF	; 223
 5e6:	80 83       	st	Z, r24
 5e8:	ff 91       	pop	r31
 5ea:	ef 91       	pop	r30
 5ec:	9f 91       	pop	r25
 5ee:	8f 91       	pop	r24
 5f0:	0f 90       	pop	r0
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	0f 90       	pop	r0
 5f6:	1f 90       	pop	r1
 5f8:	18 95       	reti

000005fa <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 5fa:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <UART_TxHead>
 5fe:	2f 5f       	subi	r18, 0xFF	; 255
 600:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 602:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <UART_TxTail>
 606:	29 17       	cp	r18, r25
 608:	e1 f3       	breq	.-8      	; 0x602 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 60a:	e2 2f       	mov	r30, r18
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	e5 58       	subi	r30, 0x85	; 133
 610:	fe 4f       	sbci	r31, 0xFE	; 254
 612:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 614:	20 93 5a 01 	sts	0x015A, r18	; 0x80015a <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 618:	e1 ec       	ldi	r30, 0xC1	; 193
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	80 62       	ori	r24, 0x20	; 32
 620:	80 83       	st	Z, r24
 622:	08 95       	ret

00000624 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	ec 01       	movw	r28, r24
    while (*s)
 62a:	03 c0       	rjmp	.+6      	; 0x632 <uart_puts+0xe>
        uart_putc(*s++);
 62c:	21 96       	adiw	r28, 0x01	; 1
 62e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 632:	88 81       	ld	r24, Y
 634:	81 11       	cpse	r24, r1
 636:	fa cf       	rjmp	.-12     	; 0x62c <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	08 95       	ret

0000063e <__itoa_ncheck>:
 63e:	bb 27       	eor	r27, r27
 640:	4a 30       	cpi	r20, 0x0A	; 10
 642:	31 f4       	brne	.+12     	; 0x650 <__itoa_ncheck+0x12>
 644:	99 23       	and	r25, r25
 646:	22 f4       	brpl	.+8      	; 0x650 <__itoa_ncheck+0x12>
 648:	bd e2       	ldi	r27, 0x2D	; 45
 64a:	90 95       	com	r25
 64c:	81 95       	neg	r24
 64e:	9f 4f       	sbci	r25, 0xFF	; 255
 650:	0c 94 2b 03 	jmp	0x656	; 0x656 <__utoa_common>

00000654 <__utoa_ncheck>:
 654:	bb 27       	eor	r27, r27

00000656 <__utoa_common>:
 656:	fb 01       	movw	r30, r22
 658:	55 27       	eor	r21, r21
 65a:	aa 27       	eor	r26, r26
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	aa 1f       	adc	r26, r26
 662:	a4 17       	cp	r26, r20
 664:	10 f0       	brcs	.+4      	; 0x66a <__utoa_common+0x14>
 666:	a4 1b       	sub	r26, r20
 668:	83 95       	inc	r24
 66a:	50 51       	subi	r21, 0x10	; 16
 66c:	b9 f7       	brne	.-18     	; 0x65c <__utoa_common+0x6>
 66e:	a0 5d       	subi	r26, 0xD0	; 208
 670:	aa 33       	cpi	r26, 0x3A	; 58
 672:	08 f0       	brcs	.+2      	; 0x676 <__utoa_common+0x20>
 674:	a9 5d       	subi	r26, 0xD9	; 217
 676:	a1 93       	st	Z+, r26
 678:	00 97       	sbiw	r24, 0x00	; 0
 67a:	79 f7       	brne	.-34     	; 0x65a <__utoa_common+0x4>
 67c:	b1 11       	cpse	r27, r1
 67e:	b1 93       	st	Z+, r27
 680:	11 92       	st	Z+, r1
 682:	cb 01       	movw	r24, r22
 684:	0c 94 44 03 	jmp	0x688	; 0x688 <strrev>

00000688 <strrev>:
 688:	dc 01       	movw	r26, r24
 68a:	fc 01       	movw	r30, r24
 68c:	67 2f       	mov	r22, r23
 68e:	71 91       	ld	r23, Z+
 690:	77 23       	and	r23, r23
 692:	e1 f7       	brne	.-8      	; 0x68c <strrev+0x4>
 694:	32 97       	sbiw	r30, 0x02	; 2
 696:	04 c0       	rjmp	.+8      	; 0x6a0 <strrev+0x18>
 698:	7c 91       	ld	r23, X
 69a:	6d 93       	st	X+, r22
 69c:	70 83       	st	Z, r23
 69e:	62 91       	ld	r22, -Z
 6a0:	ae 17       	cp	r26, r30
 6a2:	bf 07       	cpc	r27, r31
 6a4:	c8 f3       	brcs	.-14     	; 0x698 <strrev+0x10>
 6a6:	08 95       	ret

000006a8 <_exit>:
 6a8:	f8 94       	cli

000006aa <__stop_program>:
 6aa:	ff cf       	rjmp	.-2      	; 0x6aa <__stop_program>
