
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000741  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  00000919  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000277  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037c  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 **********************************************************************/
int main(void)
{
    // Green LED at port B
    // Set pin as output in Data Direction Register...
    DDRB = DDRB | (1<<LED_GREEN);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 62       	ori	r24, 0x20	; 32
  84:	84 b9       	out	0x04, r24	; 4
    // ...and turn LED off in Data Register
    PORTB = PORTB & ~(1<<LED_GREEN);
  86:	85 b1       	in	r24, 0x05	; 5
  88:	8f 7d       	andi	r24, 0xDF	; 223
  8a:	85 b9       	out	0x05, r24	; 5

    // Configure the second LED at port C
	DDRC= DDRC | (1<<LED_RED);
  8c:	87 b1       	in	r24, 0x07	; 7
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC |=(1<<LED_RED);
  92:	88 b1       	in	r24, 0x08	; 8
  94:	81 60       	ori	r24, 0x01	; 1
  96:	88 b9       	out	0x08, r24	; 8
  98:	88 b9       	out	0x08, r24	; 8

	DDRD= DDRD & ~(1<<PUSH_BUTT);
  9a:	8a b1       	in	r24, 0x0a	; 10
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD |=(1<<PUSH_BUTT);
  a0:	8b b1       	in	r24, 0x0b	; 11
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	8b b9       	out	0x0b, r24	; 11
  a6:	8b b9       	out	0x0b, r24	; 11
    // Configure Push button at port D and enable internal pull-up resistor

    // Infinite loop
    while (1)
    {
        if (bit_is_clear(PIND, 7)) 
  a8:	4f 99       	sbic	0x09, 7	; 9
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <main+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	89 e6       	ldi	r24, 0x69	; 105
  b0:	98 e1       	ldi	r25, 0x18	; 24
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x32>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3c>
  bc:	00 00       	nop
		{
		_delay_ms(BLINK_DELAY);

        PORTB = PORTB |=(1<<LED_GREEN); //led green high
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	85 b9       	out	0x05, r24	; 5
  c4:	85 b9       	out	0x05, r24	; 5
		PORTC = PORTC |=(1<<LED_RED);
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	88 b9       	out	0x08, r24	; 8
  cc:	88 b9       	out	0x08, r24	; 8
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	89 e6       	ldi	r24, 0x69	; 105
  d2:	98 e1       	ldi	r25, 0x18	; 24
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x54>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x5e>
  de:	00 00       	nop
		
		_delay_ms(BLINK_DELAY);
		
		PORTB = PORTB & ~(1<<LED_GREEN); //led green high
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	8f 7d       	andi	r24, 0xDF	; 223
  e4:	85 b9       	out	0x05, r24	; 5
		PORTC = PORTC & ~(1<<LED_RED);
  e6:	88 b1       	in	r24, 0x08	; 8
  e8:	8e 7f       	andi	r24, 0xFE	; 254
  ea:	88 b9       	out	0x08, r24	; 8
  ec:	dd cf       	rjmp	.-70     	; 0xa8 <main+0x28>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
